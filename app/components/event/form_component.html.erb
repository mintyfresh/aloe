<%= form_with(model: @event) do |form| %>
  <%= form.group do %>
    <%= form.label(:name) %>*
    <%= form.text_field(:name, required: true) %>
    <%= form.field_errors(:name) %>
  <% end %>

  <%= form.group do %>
    <%= form.label(:announcement_channel_id) %>*
    <%= form.select(:announcement_channel_id, channels, {}, disabled: channels.none?, readonly: @event.persisted?, required: true, has_help_text: true) %>
    <%= form.field_errors(:announcement_channel) %>
    <%= form.help_text(:announcement_channel_id) do %>
      This is the channel to which the event and its notifications will be posted.
      This channel cannot be changed after the event is created.
    <% end %>

    <% if channels.none? %>
      <%= alert(variant: 'warning', class: 'mt-1') do |alert| %>
        <strong>No channels found.</strong>
        Aloe must be installed into a Discord server before events can be created.<br/>
        Once you have added Aloe to your server, an administrator must run <code>/install</code> to complete the installation.<br/>
        This will also configure the channel to which events and notifications will be posted.
      <% end %>
    <% end %>
  <% end %>

  <%= form.group do %>
    <%= form.switch(:enforce_guild_membership, disabled: channels.none?, has_help_text: true) %>
    <%= form.help_text(:enforce_guild_membership) do %>
      When enabled, only members of the Discord server are be able to register for the event.
    <% end %>
  <% end %>

  <%= form.group do %>
    <%= form.label(:format) %>
    <%= form.select(:format, Event::SUPPORTED_FORMATS) %>
    <%= form.field_errors(:format) %>
  <% end %>

  <%= form.group do %>
    <%= form.label(:description) %>
    <%= form.text_area(:description) %>
    <%= form.field_errors(:description) %>
  <% end %>

  <%= form.group do %>
    <%= form.label(:location) %>
    <%= form.text_field(:location, placeholder: "e.g. Everfree Northwest #{Date.current.next_year.year} or Online") %>
    <%= form.field_errors(:location) %>
  <% end %>

  <%= form.group do %>
    <%= form.label(:time_zone) %>*
    <%= form.time_zone_select(:time_zone, nil, {}, required: true) %>
    <%= form.field_errors(:time_zone) %>
  <% end %>

  <%= form.group(class: 'row') do %>
    <div class="col">
      <%= form.label(:starts_at) %>*
      <%= form.datetime_field(:starts_at, required: true) %>
      <%= form.field_errors(:starts_at) %>
    </div>
    <div class="col">
      <%= form.label(:ends_at) %>*
      <%= form.datetime_field(:ends_at, required: true) %>
      <%= form.field_errors(:ends_at) %>
    </div>
  <% end %>

  <%= form.group(class: 'row') do %>
    <div class="col">
      <%= form.label(:registration_opens_at) %>
      <%= form.datetime_field(:registration_opens_at, has_help_text: true) %>
      <%= form.field_errors(:registration_opens_at) %>
      <%= form.help_text(:registration_opens_at) do %>
        If not specified, registration will open as soon as the event is created.
      <% end %>
    </div>
    <div class="col">
      <%= form.label(:registration_closes_at) %>
      <%= form.datetime_field(:registration_closes_at, has_help_text: true) %>
      <%= form.field_errors(:registration_closes_at) %>
      <%= form.help_text(:registration_closes_at) do %>
        If not specified, registration will close once the event starts.
      <% end %>
    </div>
  <% end %>

  <%= accordion(always_open: true, class: 'mb-3') do |accordion| %>
    <% accordion.with_item(expanded: @event.new_record? || @event.role_config&.persisted?) do |item| %>
      <% item.with_header_content('Discord Role Configuration') %>
      <% item.with_body do %>
        <%= render Event::RoleConfigFieldsComponent.new(form:) %>
      <% end %>
    <% end %>

    <% accordion.with_item(expanded: @event.new_record? || @event.price&.persisted?) do |item| %>
      <% item.with_header_content('Event Pricing Configuration') %>
      <% item.with_body do %>
        <%= render Event::PriceConfigFieldsComponent.new(form:) %>
      <% end %>
    <% end %>

    <% accordion.with_item(expanded: @event.new_record? || @event.check_in_config&.persisted?) do |item| %>
      <% item.with_header_content('Event Check-in Configuration') %>
      <% item.with_body do %>
        <%= render Event::CheckInConfigFieldsComponent.new(form:) %>
      <% end %>
    <% end %>
  <% end %>

  <%= form.base_errors %>

  <%= form.group do %>
    <%= form.submit %>
  <% end %>
<% end %>
